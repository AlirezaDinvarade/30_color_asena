version: "3.9"

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    networks:
      - main
    expose:
      - 5672
    restart: on-failure
    
  postgres:
    container_name: postgres
    image: postgres:latest
#    command: psql -c -h postgres"create database asena;"
#    command: psql -c -h postgres asena < /backup/asena.sql
    environment:
      - POSTGRES_DB=asena
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Alireza12851376
    networks:
      - main
    restart: on-failure
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./backup:/backup

  celery_worker:
    container_name: celery_worker
    command: celery -A asena worker -l INFO
    depends_on:
      - app
      - rabbitmq
      - postgres
    image: app-image
    environment:
      - C_FORCE_ROOT=true
      - CELERY_BROKER=amqp://rabbitmq
    networks:
      - main
    restart: on-failure

  celery_beat:
    container_name: celery_beat
    command: celery -A asena beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler 
    depends_on:
      - app
      - rabbitmq
      - postgres
    image: app-image
    environment:
      - C_FORCE_ROOT="true"
    networks:
      - main
    restart: on-failure

  app:
    build:
      context: ./asena
      dockerfile: Dockerfile
#    command: sh -c "python manage.py migrate && gunicorn asena.wsgi -b 0.0.0.0:8000"
#    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    command: sh -c "python manage.py runserver 0.0.0.0:8000"
    container_name: app
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "8000:8000"
    networks:
      - main
    restart: on-failure
    volumes:
      - ./backup:/backup

  react:
    stdin_open: true
    build: 
      context: ./Sedreh-Asena-main
    container_name: react
    volumes:
      - react_build:/react/build
#    ports:
#      - "3000:3000"
    networks:
      - main
    
  nginx:
    container_name: nginx
    command: nginx -g 'daemon off;'
    depends_on:
      - app
      - react
    image: nginx:latest
    networks:
      - main
    ports:
      - "80:8080"
    restart: on-failure
    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - react_build:/var/www/react
    external_links:
      - react

networks:
  main:

volumes:
#  postgres_data:
  react_build: